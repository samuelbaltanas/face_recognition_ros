#!/usr/bin/env python2

import sys
import os

import rospy as ros
import sensor_msgs.msg as sensor_msgs
import cv_bridge

from face_recognition_ros.utils import files

sys.path.append(os.path.join(files.PROJECT_ROOT, "../facenet/src"))

from face_recognition_ros.utils import config  # noqa: E402
from face_recognition_ros import detection  # noqa: E402

NODE_NAME = "face_detection_sample"


class DetectorNode:
    def __init__(self):
        config.load_config()
        self.face_det = detection.FacialDetector()

        self.bridge = cv_bridge.CvBridge()

        self.img_pub = ros.Publisher("/detections", sensor_msgs.Image, queue_size=1)

        ros.loginfo("[{0}] Node ready.".format(NODE_NAME))

    def imageCallback(self, msg):
        ros.loginfo("[{}] Image received.".format(NODE_NAME))

        try:
            cv_image = self.bridge.imgmsg_to_cv2(msg, "bgr8")
        except cv_bridge.CvBridgeError as e:
            ros.logerr("[{}] Error: {}".format(NODE_NAME, e))
            sys.exit(-1)

        faces = self.face_det.extract_datum(cv_image)
        ros.loginfo("[{}] Persons detected: {}. ".format(NODE_NAME, len(faces)))
        for r in faces:
            cv_image = r.face_region.draw(cv_image, label="Samuel")

        ros.loginfo("Faces drawn.")
        self.img_pub.publish(self.bridge.cv2_to_imgmsg(cv_image))


def main():
    ros.init_node(NODE_NAME)

    det = DetectorNode()

    while not ros.is_shutdown():
        try:
            msg = ros.wait_for_message("/camera", sensor_msgs.Image)
            det.imageCallback(msg)
        except KeyboardInterrupt:
            break


if __name__ == "__main__":
    main()
