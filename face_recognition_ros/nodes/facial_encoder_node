#!/usr/bin/env python2

import cv2 as cv

import tensorflow as tf
import rospy as ros

import geometry_msgs.msg as geometry_msgs
import sensor_msgs.msg as sensor_msgs
import cv_bridge

from face_recognition_ros import encoding, detection, matching
from face_recognition_ros_msgs.msg import BoundingBox, Identities

NODE_NAME = "face_recognition"
# MODEL = '20180402-114759.pd'


class FacialEncoderNode:
    def __init__(self, sess):
        # TODO: Make classes from face_recognition_ros to implicitely load config
        self.face_enc = encoding.FacialEncoder(
            sess, ros.get_param("/face_recognition/FACENET")
        )
        ros.loginfo("[{}] Facial encoder loaded.".format(NODE_NAME))

        self.face_det = detection.FacialDetector(
            ros.get_param("/face_recognition/OPENPOSE")
        )

        self.face_match = matching.FaceMatcher(
            ros.get_param("/face_recognition/STORAGE")
        )

        self.bridge = cv_bridge.CvBridge()
        self.img_sub = ros.Subscriber(
            ros.get_param("/face_recognition/ROS/camera_topic"),
            sensor_msgs.Image,
            self.imageCallback,
            buff_size=1,
        )

        ros.loginfo("[{0}] Node: {0} ready.".format(NODE_NAME))

    def imageCallback(self, msg):
        ros.loginfo("[{}] Image received.".format(NODE_NAME))

        try:
            cv_image = self.bridge.imgmsg_to_cv2(msg, "rgb8")
        except cv_bridge.CvBridgeError as e:
            ros.logerr("[{}] Error: {}".format(NODE_NAME, e))

        faces = self.face_det.extract_faces(cv_image)
        ros.loginfo("[{}] Faces detected: {}.".format(NODE_NAME, len(faces)))
        emb = self.face_enc.predict(faces)
        ids = self.face_match.recognize(emb)

        ros.loginfo(
            "[{}] Persons recognized: {}. \n {}".format(
                NODE_NAME, len(ids), ids
            )
        )
        # TODO: Output ros message


def main():
    with tf.Graph().as_default():
        with tf.Session() as sess:
            ros.init_node(NODE_NAME)
            node = FacialEncoderNode(sess)

            try:
                ros.spin()
            except KeyboardInterrupt:
                ros.logerr(
                    "[{}] KeyboardInterrupt. Shutting down.".format(NODE_NAME)
                )


if __name__ == "__main__":
    main()
