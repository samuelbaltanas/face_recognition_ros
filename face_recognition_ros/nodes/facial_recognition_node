#!/usr/bin/env python2

import sys

import rospy as ros
import sensor_msgs.msg as sensor_msgs
import cv_bridge

from face_recognition_ros.utils import config  # noqa: E402
from face_recognition_ros import recognition  # noqa: E402

NODE_NAME = "face_recognition"


class RecognitionNode:
    def __init__(self):

        self.bridge = cv_bridge.CvBridge()

        self.img_pub = ros.Publisher("/detections", sensor_msgs.Image, queue_size=1)
        self.im_sub = ros.Subscriber("/camera", sensor_msgs.Image, self.imageCallback)

        self.face_det = recognition.Recognition()

        self.received = False
        self.image = None

        ros.loginfo("[{0}] Node ready.".format(NODE_NAME))

    def imageCallback(self, msg):
        self.received = True
        self.image = msg

    def process_image(self):
        if self.received:
            try:
                cv_image = self.bridge.imgmsg_to_cv2(self.image, "bgr8")
            except cv_bridge.CvBridgeError as e:
                ros.logerr("[{}] Error: {}".format(NODE_NAME, e))
                sys.exit(-1)

            faces = self.face_det.recognize(cv_image)
            for face in faces:
                cv_image = face.face_region.draw(cv_image, label=face.identity)

            self.img_pub.publish(self.bridge.cv2_to_imgmsg(cv_image, "bgr8"))
            self.received = False


def main():
    ros.init_node(NODE_NAME)

    config.load_config()
    config.logger_config()

    det = RecognitionNode()

    rate = ros.Rate(20)
    while not ros.is_shutdown():
        try:
            det.process_image()
            rate.sleep()
        except KeyboardInterrupt:
            break
        except Exception as e:
            ros.logerr(e.message)


if __name__ == "__main__":
    main()
